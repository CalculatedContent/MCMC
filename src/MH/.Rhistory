sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(10000222222)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(1000022222)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(100022222)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(10002222)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(1002222)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(100222)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(10022)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(1002)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(10021)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(100211)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(1002111)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(10021111)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(110021111)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(1100211)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(1100211)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(1100211)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(1100211)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(1100211)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(111)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
test.sd.T <- function(sd.T, plot.or.not) {
# Setup some arg
# set.seed(50)
mu = c(5,10)
sigma = matrix(c(1,1,1,4), nrow=2, ncol=2, byrow = TRUE)
real_corr = sqrt( (sigma[1,2]*sigma[2,1])/(sigma[1,1]*sigma[2,2]) ) # Theoretical corelation
sd.T = sd.T # Set the standard deviation of the proposal
# required sample num
sample.num = 1000000;
random.matrix = matrix(nrow=sample.num, ncol=2)
# Starting value
cur.x <- c(0,0)
cur.f <- norm.probability(cur.x, mu, sigma)
accept.num <- 0
# Main Algorithm
for(i in 1:sample.num){
new.x <- cur.x + sd.T * rnorm(2)
# Generate a new x with norm(mean=cur.x, sd=given.by.me)
new.f <- norm.probability(new.x, mu, sigma)
if ( runif(1) < min(1,new.f/cur.f) ) { # transfer to another value
accept.num <- accept.num + 1
cur.x <- new.x
cur.f <- new.f
} else { # retain the original value
cur.x <- cur.x
cur.f <- cur.f
}
random.matrix[i,] <- cur.x
}
accepting.rate <- accept.num/sample.num
pearson.correlation <- cor.test(random.matrix[,1], random.matrix[,2])$estimate
# plot, output results
if (plot.or.not==1) {
## Show result
# We want the accepting rate to be 0.234 based on Roberts et al's work on 1995
cat( paste("Accepting Rate:", accepting.rate, '\n') )
cat( paste("Theoretically correlation:", real_corr, '\n' ) )
cat( paste("Real correlation:", pearson.correlation, '\n') )
# Plot
plot(random.matrix, xlab = 'x1', ylab = 'x2')
}
return(list(accepting.rate, pearson.correlation))
}
set.seed(111)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
test.sd.T <- function(sd.T, plot.or.not) {
# Setup some arg
# set.seed(50)
mu = c(5,10)
sigma = matrix(c(1,1,1,4), nrow=2, ncol=2, byrow = TRUE)
real_corr = sqrt( (sigma[1,2]*sigma[2,1])/(sigma[1,1]*sigma[2,2]) ) # Theoretical corelation
sd.T = sd.T # Set the standard deviation of the proposal
# required sample num
sample.num = 100000;
random.matrix = matrix(nrow=sample.num, ncol=2)
# Starting value
cur.x <- c(0,0)
cur.f <- norm.probability(cur.x, mu, sigma)
accept.num <- 0
# Main Algorithm
for(i in 1:sample.num){
new.x <- cur.x + sd.T * rnorm(2)
# Generate a new x with norm(mean=cur.x, sd=given.by.me)
new.f <- norm.probability(new.x, mu, sigma)
if ( runif(1) < min(1,new.f/cur.f) ) { # transfer to another value
accept.num <- accept.num + 1
cur.x <- new.x
cur.f <- new.f
} else { # retain the original value
cur.x <- cur.x
cur.f <- cur.f
}
random.matrix[i,] <- cur.x
}
accepting.rate <- accept.num/sample.num
pearson.correlation <- cor.test(random.matrix[,1], random.matrix[,2])$estimate
# plot, output results
if (plot.or.not==1) {
## Show result
# We want the accepting rate to be 0.234 based on Roberts et al's work on 1995
cat( paste("Accepting Rate:", accepting.rate, '\n') )
cat( paste("Theoretically correlation:", real_corr, '\n' ) )
cat( paste("Real correlation:", pearson.correlation, '\n') )
# Plot
plot(random.matrix, xlab = 'x1', ylab = 'x2')
}
return(list(accepting.rate, pearson.correlation))
}
# Use sd.T = 3.0
set.seed(100)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
# Use sd.T = 3.0
set.seed(1009)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(10880)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(108809)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(29)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
set.seed(239)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
test.sd.T <- function(sd.T, plot.or.not) {
# Setup some arg
# set.seed(50)
mu = c(5,10)
sigma = matrix(c(1,1,1,4), nrow=2, ncol=2, byrow = TRUE)
real_corr = sqrt( (sigma[1,2]*sigma[2,1])/(sigma[1,1]*sigma[2,2]) ) # Theoretical corelation
sd.T = sd.T # Set the standard deviation of the proposal
# required sample num
sample.num = 100000;
random.matrix = matrix(nrow=sample.num, ncol=2)
# Starting value
cur.x <- c(0,0)
cur.f <- norm.probability(cur.x, mu, sigma)
accept.num <- 0
# Main Algorithm
for(i in 1:sample.num){
new.x <- cur.x + sd.T * rnorm(2)
# Generate a new x with norm(mean=cur.x, sd=given.by.me)
new.f <- norm.probability(new.x, mu, sigma)
if ( runif(1) < min(1,new.f/cur.f) ) { # transfer to another value
accept.num <- accept.num + 1
cur.x <- new.x
cur.f <- new.f
} else { # retain the original value
cur.x <- cur.x
cur.f <- cur.f
}
random.matrix[i,] <- cur.x
}
accepting.rate <- accept.num/sample.num
pearson.correlation <- cor.test(random.matrix[,1], random.matrix[,2])$estimate
# plot, output results
if (plot.or.not==1) {
## Show result
# We want the accepting rate to be 0.234 based on Roberts et al's work on 1995
cat( paste("Accepting Rate:", accepting.rate, '\n') )
cat( paste("Theoretically correlation:", real_corr, '\n' ) )
cat( paste("Real correlation:", pearson.correlation, '\n') )
# Plot
plot(random.matrix, xlab = 'x_1', ylab = 'x_2')
}
return(list(accepting.rate, pearson.correlation))
}
test.sd.T <- function(sd.T, plot.or.not) {
# Setup some arg
# set.seed(50)
mu = c(5,10)
sigma = matrix(c(1,1,1,4), nrow=2, ncol=2, byrow = TRUE)
real_corr = sqrt( (sigma[1,2]*sigma[2,1])/(sigma[1,1]*sigma[2,2]) ) # Theoretical corelation
sd.T = sd.T # Set the standard deviation of the proposal
# required sample num
sample.num = 100000;
random.matrix = matrix(nrow=sample.num, ncol=2)
# Starting value
cur.x <- c(0,0)
cur.f <- norm.probability(cur.x, mu, sigma)
accept.num <- 0
# Main Algorithm
for(i in 1:sample.num){
new.x <- cur.x + sd.T * rnorm(2)
# Generate a new x with norm(mean=cur.x, sd=given.by.me)
new.f <- norm.probability(new.x, mu, sigma)
if ( runif(1) < min(1,new.f/cur.f) ) { # transfer to another value
accept.num <- accept.num + 1
cur.x <- new.x
cur.f <- new.f
} else { # retain the original value
cur.x <- cur.x
cur.f <- cur.f
}
random.matrix[i,] <- cur.x
}
accepting.rate <- accept.num/sample.num
pearson.correlation <- cor.test(random.matrix[,1], random.matrix[,2])$estimate
# plot, output results
if (plot.or.not==1) {
## Show result
# We want the accepting rate to be 0.234 based on Roberts et al's work on 1995
cat( paste("Accepting Rate:", accepting.rate, '\n') )
cat( paste("Theoretically correlation:", real_corr, '\n' ) )
cat( paste("Real correlation:", pearson.correlation, '\n') )
# Plot
plot(random.matrix, xlab = 'x_1', ylab = 'x_2', col = 'b')
}
return(list(accepting.rate, pearson.correlation))
}
set.seed(239)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
test.sd.T <- function(sd.T, plot.or.not) {
# Setup some arg
# set.seed(50)
mu = c(5,10)
sigma = matrix(c(1,1,1,4), nrow=2, ncol=2, byrow = TRUE)
real_corr = sqrt( (sigma[1,2]*sigma[2,1])/(sigma[1,1]*sigma[2,2]) ) # Theoretical corelation
sd.T = sd.T # Set the standard deviation of the proposal
# required sample num
sample.num = 50000;
random.matrix = matrix(nrow=sample.num, ncol=2)
# Starting value
cur.x <- c(0,0)
cur.f <- norm.probability(cur.x, mu, sigma)
accept.num <- 0
# Main Algorithm
for(i in 1:sample.num){
new.x <- cur.x + sd.T * rnorm(2)
# Generate a new x with norm(mean=cur.x, sd=given.by.me)
new.f <- norm.probability(new.x, mu, sigma)
if ( runif(1) < min(1,new.f/cur.f) ) { # transfer to another value
accept.num <- accept.num + 1
cur.x <- new.x
cur.f <- new.f
} else { # retain the original value
cur.x <- cur.x
cur.f <- cur.f
}
random.matrix[i,] <- cur.x
}
accepting.rate <- accept.num/sample.num
pearson.correlation <- cor.test(random.matrix[,1], random.matrix[,2])$estimate
# plot, output results
if (plot.or.not==1) {
## Show result
# We want the accepting rate to be 0.234 based on Roberts et al's work on 1995
cat( paste("Accepting Rate:", accepting.rate, '\n') )
cat( paste("Theoretically correlation:", real_corr, '\n' ) )
cat( paste("Real correlation:", pearson.correlation, '\n') )
# Plot
plot(random.matrix, xlab = 'x_1', ylab = 'x_2', col = 'b')
}
return(list(accepting.rate, pearson.correlation))
}
set.seed(100)
sd.T = 3.0
ans_list <- test.sd.T(sd.T, 1)
acc.rate <- ans_list[[1]]
cor <- ans_list[[2]]
cat(acc.rate, cor, '\n')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
sample.num/10:sample.num
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
source('~/Desktop/mcmc/metropolis_hastings/metropolis_hasting.R')
acc.rate.vec
cite()
?cite
cite()
cite('R')
citation()
